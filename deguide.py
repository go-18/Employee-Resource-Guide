#!/usr/bin/python
# -*- coding: latin-1 -*-

import sys, os
from os.path import relpath
import shutil, errno
import json

sys.path.append('libs')
import markdown

RESOURCES_DIR = None


def build_page(item, out_dir):
    p_name = str('None' if item['name'] is None else item['name'])
    rel_path = os.path.join(out_dir, str(p_name)+'.html')
    
    with open(rel_path, "w") as f:
        resources_path = os.path.relpath(RESOURCES_DIR, out_dir)
        page_html = populate_template("template.html", p_name, json.dumps(item, indent=2), resources_path)
        f.write(page_html)
    return rel_path


def populate_template(template, page_title, toc_data, resources_path):
    f = open(template, 'r')
    template_content = f.read()
    return template_content \
        .replace("{page-title}", page_title) \
        .replace("{toc-data}", toc_data) \
        .replace("{resources-path}", resources_path+os.path.sep) \
        .replace("{head-comment}", "\n\t\tPLEASE DO NOT EDIT THIS FILE\n\t\tTHIS FILE IS DYNAMICALLY GENERATED.\n\t\tANY CHANGES MADE MAY BE OVERWRITTEN.\n")


def read_markdown_file_as_html(markdown_filename):
    f = open(markdown_filename, 'r')
    markdown_content = f.read()
    return markdown.markdown(markdown_content)


def walk_dir(root_dir):
    """
    >>> walk_dir("./test_docs/folder containing pdfs/").documents
    ['dummy_pdf 2.pdf', 'dummy_pdf 3.pdf', 'dummy_pdf 4.pdf', 'dummy_pdf.pdf']
    >>> len(walk_dir("./test_docs/folder containing pdfs/").children)
    0
    >>> walk_dir("./test_docs/folder containing markdown and pdfs/").stub is None
    False
    >>> walk_dir("./test_docs/folder containing markdown and pdfs/").children
    ['dummy_pdf 2.pdf', 'dummy_pdf 3.pdf', 'dummy_pdf 4.pdf', 'dummy_pdf.pdf']
    """
    # print('walking directory at {0}'.format(root_dir))
    folder_name = os.path.splitext(os.path.basename(root_dir))[0]

    store = {'name' : folder_name, 'stub': None, 'docs' : [], 'children':[], 'abs_path':root_dir}
    for item in os.listdir(root_dir):
        path = os.path.join(os.path.abspath(root_dir), item)
        # print('item is {0}'.format(item))
        if os.path.isfile(path):
            if item.endswith(".pdf"):
                store['docs'].append(item)
            elif item.endswith(".md"):
                store['stub'] = read_markdown_file_as_html(path)
        if os.path.isdir(path) and dir_contains_pdf(path):
            store['children'].append(walk_dir(path))
    return store


def make_relative(item, work_dir):
    item_dir = item.pop('abs_path', None)
    if item_dir is not None:
        item['rel_path'] = os.path.relpath(item_dir, work_dir)
    for child in item['children']:
        child = make_relative(child, work_dir)
    return item


def gather_resources(src, dst):
    # http://stackoverflow.com/a/12514470/940217
    # http://stackoverflow.com/a/1994840/940217
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else:
            raise


def dir_contains_pdf(root):
    """
    >>> dir_contains_pdf("./test_docs/folder containing pdfs/")
    True
    >>> dir_contains_pdf("./test_docs/folder containing nothing/")
    False
    >>> dir_contains_pdf("./test_docs/folder containing folders, markdown, and pdf/")
    True
    >>> dir_contains_pdf("./test_docs/folder containing markdown and pdfs/")
    True
    """
    root = os.path.abspath(root)
    for item in os.listdir(root):
        item_path = os.path.join(root, item)
        if os.path.isfile(item_path):
            if item.endswith(".pdf"):
                return True
        elif os.path.isdir(item_path):
            if dir_contains_pdf(item_path):
                return True
    return False


def print_help(filename):
    print("You must provide folder name and path to resources.")
    print("The results will be placed in the current working directory.")
    print("\nExample: ")
    print("\tpython " + filename + ' "./docs/Employee Resource Guide" ./resources')
    print('\nThe output would be saved at "./Employee Resource Guide"\n')


def main():
    args = sys.argv[1:]
    if len(args) is 0:
        import doctest
        doctest.testmod()
        return
    if len(args) < 3:
        print_help(sys.argv[0])
        return

    in_dir = args[0]
    target_dir = args[2]

    out_resources_dir = os.path.join(target_dir, 'resources')
    print('"{0}"'.format(target_dir))
    print('"{0}"'.format(out_resources_dir))

    global RESOURCES_DIR
    RESOURCES_DIR = args[1]

    gather_resources(in_dir, target_dir)
    gather_resources(RESOURCES_DIR, out_resources_dir)
    RESOURCES_DIR = os.path.abspath(out_resources_dir)

    source_items = walk_dir(os.path.abspath(target_dir))


    ## print 'resources directory = '+RESOURCES_DIR
    #root_resource_items = walk_dir(target_dir)
    #print(str(root_resource_items.to_json()))
  

    rel_items = make_relative(source_items, target_dir)
    build_page(rel_items, target_dir)





if __name__ == '__main__':
    main()